/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  HandleProxy,
  HandleProxyInterface,
} from "../../../../../contracts/idea3/proxy/HandleProxyForLensProtocol.sol/HandleProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getHandleByAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610133806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063eebfbb6514602d575b600080fd5b603e60383660046052565b50606090565b60405160499190608d565b60405180910390f35b600060208284031215606357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114608657600080fd5b9392505050565b600060208083528351808285015260005b8181101560b857858101830151858201604001528201609e565b8181111560c9576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea2646970667358221220e4f6add93ef7e3a176c168246f94ee3f0efd9050a23fb14e70eba17b08abff6364736f6c63430008090033";

type HandleProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HandleProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HandleProxy__factory extends ContractFactory {
  constructor(...args: HandleProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HandleProxy> {
    return super.deploy(overrides || {}) as Promise<HandleProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HandleProxy {
    return super.attach(address) as HandleProxy;
  }
  override connect(signer: Signer): HandleProxy__factory {
    return super.connect(signer) as HandleProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HandleProxyInterface {
    return new utils.Interface(_abi) as HandleProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HandleProxy {
    return new Contract(address, _abi, signerOrProvider) as HandleProxy;
  }
}
