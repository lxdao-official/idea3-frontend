/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ExchangeInterface extends utils.Interface {
  functions: {
    "cancelOrder(uint256)": FunctionFragment;
    "createOrder(address,bool,address,uint256,bool,address,uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "offerCount()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "trade(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOrder"
      | "createOrder"
      | "getOffer"
      | "offerCount"
      | "orders"
      | "trade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;

  events: {};
}

export interface Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      buyer: PromiseOrValue<string>,
      sellerIsNFT: PromiseOrValue<boolean>,
      sellerTokenAddress: PromiseOrValue<string>,
      sellerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      buyerIsNFT: PromiseOrValue<boolean>,
      buyerTokenAddress: PromiseOrValue<string>,
      buyerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean
      ] & {
        seller: string;
        buyer: string;
        sellerIsNFT: boolean;
        sellerTokenAddress: string;
        sellerTokenIdOrAmount: BigNumber;
        buyerIsNFT: boolean;
        buyerTokenAddress: string;
        buyerTokenIdOrAmount: BigNumber;
        completed: boolean;
      }
    >;

    offerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean
      ] & {
        seller: string;
        buyer: string;
        sellerIsNFT: boolean;
        sellerTokenAddress: string;
        sellerTokenIdOrAmount: BigNumber;
        buyerIsNFT: boolean;
        buyerTokenAddress: string;
        buyerTokenIdOrAmount: BigNumber;
        completed: boolean;
      }
    >;

    trade(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOrder(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    buyer: PromiseOrValue<string>,
    sellerIsNFT: PromiseOrValue<boolean>,
    sellerTokenAddress: PromiseOrValue<string>,
    sellerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
    buyerIsNFT: PromiseOrValue<boolean>,
    buyerTokenAddress: PromiseOrValue<string>,
    buyerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      BigNumber,
      boolean,
      string,
      BigNumber,
      boolean
    ] & {
      seller: string;
      buyer: string;
      sellerIsNFT: boolean;
      sellerTokenAddress: string;
      sellerTokenIdOrAmount: BigNumber;
      buyerIsNFT: boolean;
      buyerTokenAddress: string;
      buyerTokenIdOrAmount: BigNumber;
      completed: boolean;
    }
  >;

  offerCount(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      BigNumber,
      boolean,
      string,
      BigNumber,
      boolean
    ] & {
      seller: string;
      buyer: string;
      sellerIsNFT: boolean;
      sellerTokenAddress: string;
      sellerTokenIdOrAmount: BigNumber;
      buyerIsNFT: boolean;
      buyerTokenAddress: string;
      buyerTokenIdOrAmount: BigNumber;
      completed: boolean;
    }
  >;

  trade(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      buyer: PromiseOrValue<string>,
      sellerIsNFT: PromiseOrValue<boolean>,
      sellerTokenAddress: PromiseOrValue<string>,
      sellerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      buyerIsNFT: PromiseOrValue<boolean>,
      buyerTokenAddress: PromiseOrValue<string>,
      buyerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean
      ] & {
        seller: string;
        buyer: string;
        sellerIsNFT: boolean;
        sellerTokenAddress: string;
        sellerTokenIdOrAmount: BigNumber;
        buyerIsNFT: boolean;
        buyerTokenAddress: string;
        buyerTokenIdOrAmount: BigNumber;
        completed: boolean;
      }
    >;

    offerCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean
      ] & {
        seller: string;
        buyer: string;
        sellerIsNFT: boolean;
        sellerTokenAddress: string;
        sellerTokenIdOrAmount: BigNumber;
        buyerIsNFT: boolean;
        buyerTokenAddress: string;
        buyerTokenIdOrAmount: BigNumber;
        completed: boolean;
      }
    >;

    trade(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      buyer: PromiseOrValue<string>,
      sellerIsNFT: PromiseOrValue<boolean>,
      sellerTokenAddress: PromiseOrValue<string>,
      sellerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      buyerIsNFT: PromiseOrValue<boolean>,
      buyerTokenAddress: PromiseOrValue<string>,
      buyerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      buyer: PromiseOrValue<string>,
      sellerIsNFT: PromiseOrValue<boolean>,
      sellerTokenAddress: PromiseOrValue<string>,
      sellerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      buyerIsNFT: PromiseOrValue<boolean>,
      buyerTokenAddress: PromiseOrValue<string>,
      buyerTokenIdOrAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
